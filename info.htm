<html>
<head>
	<title>HM2 - key/value NoSQL database that utilize LSM trees</title>
</head>
<body>

<h1>HM2 - key/value NoSQL database that utilize LSM trees</h1>

<hr />

<h3>Why another key/value?</h3>

<p>We worked a lot with Apache Cassandra, but we never needed her distributed functionality.
We also worked with Redis, but problem there is data must fit in memory.</p>

<p>Goals of the project are.</p>

<ul>
	<li>Key/Value store</li>
	<li>Redis / Memcached protocol</li>
	<li>Async network I/O</li>
	<li>Data not need to fit in memory</li>
	<li>Speed</li>
	<li>Consistent</li>
	<li>High quality code</li>
</ul>

<h3>Architecture</h3>

<p>Architecture is derived from Apache Cassandra.
There is memtable and several disk files.</p>

<p>Writes will be done in Memtable.
Reading will be done first in memtable and if data will not be found there,
system will try read each disktable until find the key.
This is called "LSM tree" or much simpler - "Differential files".</p>

<p>Writes should be always fast.
Reads should be fast if there are not too many disktables.</p>


<h3>Memtable</h3>

<p>Memtable is stored in memory in hashtable.
Hashtable have configurable, but constant number of buckets.
This is required because data need later to be stored on the disk.</p>

<p>There are no data stored in the "leaves" of the hashtable.
All data is stored in the collision lists.
Collisions lists are sorted dynamic arrays called vectors.</p>

<p>Vectors are much faster than linked lists and do not waste as much memory.
All vectors have configurable pre-allocated memory, usually 1024 bytes.</p>


<h3>Disktables</h3>

<p>Periodicaly, the memtable is flushed on the disk in disktable.
Disktable file have similar order - hashtable with same bucket count and sorted vector like structures.</p>

<p>Disktables are immutable.
This means very good OS cache and easy backup.
Downside is that deletes must be implemented by markers called tombstones (same key, NULL value).</p>

<p>Disktables header and control data are 64bit integers (uint64_t) stored as BigEndian.
Simple 1 byte XOR checksum is included for each pair.</p>

<p>Disktables ment to be load using MMAP().
Effors are made things to works on 32bit OS-es, but soon or later these will run out of address space.
This means that for production you will definitely need 64bit OS.</p>


<h3>LSM tree notes.</h3>

<p>Here is what Wikipedia say about:<br />
<a href="http://en.wikipedia.org/wiki/Log-structured_merge-tree">Log structured merge tree</a></p>

<p>However there are 1976's research by
Dennis G. Severance and
Guy M. Lohman
on the similar topic here:<br />
<a href="http://www-users.cs.umn.edu/~he/diff/p256-severance.pdf">Differential files: their application to the maintenance of large databases - University of Minnesota, Minneapolis</a>.</p>

<p>When database works, many disktables will be created.
This will slow down the reads very much.
By this reason disktables must be merged.</p>

<p>Because disktables are read only, merge can be implemented as separate user space process.
For read only databases you may choose not to start it at all.</p>

<p>Unlike Apache Cassandra, there are a way to compact several tables into single file.
However this will complicate the things and probably only basic two table merge will be implemented.</p>

</body>
</html>
